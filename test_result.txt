=================================================================
==2814==ERROR: AddressSanitizer: heap-use-after-free on address 0x6040000260f8 at pc 0x00010efc8502 bp 0x7ffee0c87a90 sp 0x7ffee0c87a88
READ of size 8 at 0x6040000260f8 thread T0
    #0 0x10efc8501 in Webserver::disconnect_client(Client&) Webserver.cpp:66
    #1 0x10efcd783 in Webserver::run(timeval) Webserver.cpp:265
    #2 0x10ef6a9ea in main main.cpp:21
    #3 0x7fff70eadcc8 in start+0x0 (libdyld.dylib:x86_64+0x1acc8)

0x6040000260f8 is located 40 bytes inside of 48-byte region [0x6040000260d0,0x604000026100)
freed by thread T0 here:
    #0 0x10f208c0d in wrap__ZdlPv+0x7d (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x55c0d)
    #1 0x10ef6eb44 in std::__1::_DeallocateCaller::__do_call(void*) new:334
    #2 0x10ef6eb28 in std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned long) new:292
    #3 0x10efd4cf0 in std::__1::_DeallocateCaller::__do_deallocate_handle_size_align(void*, unsigned long, unsigned long) new:262
    #4 0x10efd4cc4 in std::__1::__libcpp_deallocate(void*, unsigned long, unsigned long) new:340
    #5 0x10efe1b6d in std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, FDType*>, void*> >::deallocate(std::__1::__tree_node<std::__1::__value_type<int, FDType*>, void*>*, unsigned long) memory:1872
    #6 0x10efe1984 in std::__1::allocator_traits<std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, FDType*>, void*> > >::deallocate(std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, FDType*>, void*> >&, std::__1::__tree_node<std::__1::__value_type<int, FDType*>, void*>*, unsigned long) memory:1594
    #7 0x10efe0c8d in std::__1::__tree<std::__1::__value_type<int, FDType*>, std::__1::__map_value_compare<int, std::__1::__value_type<int, FDType*>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, FDType*> > >::erase(std::__1::__tree_const_iterator<std::__1::__value_type<int, FDType*>, std::__1::__tree_node<std::__1::__value_type<int, FDType*>, void*>*, long>) __tree:2524
    #8 0x10efe061e in unsigned long std::__1::__tree<std::__1::__value_type<int, FDType*>, std::__1::__map_value_compare<int, std::__1::__value_type<int, FDType*>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, FDType*> > >::__erase_unique<int>(int const&) __tree:2545
    #9 0x10efc938c in std::__1::map<int, FDType*, std::__1::less<int>, std::__1::allocator<std::__1::pair<int const, FDType*> > >::erase(int const&) map:1304
    #10 0x10efc8c15 in Webserver::disconnect_client(Client&) Webserver.cpp:87
    #11 0x10efcd783 in Webserver::run(timeval) Webserver.cpp:265
    #12 0x10ef6a9ea in main main.cpp:21
    #13 0x7fff70eadcc8 in start+0x0 (libdyld.dylib:x86_64+0x1acc8)

previously allocated by thread T0 here:
    #0 0x10f2087ed in wrap__Znwm+0x7d (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x557ed)
    #1 0x10efb2e78 in std::__1::__libcpp_allocate(unsigned long, unsigned long) new:253
    #2 0x10efc3464 in std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, FDType*>, void*> >::allocate(unsigned long, void const*) memory:1869
    #3 0x10efc3120 in std::__1::allocator_traits<std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, FDType*>, void*> > >::allocate(std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, FDType*>, void*> >&, unsigned long) memory:1586
    #4 0x10efc23f3 in std::__1::__tree<std::__1::__value_type<int, FDType*>, std::__1::__map_value_compare<int, std::__1::__value_type<int, FDType*>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, FDType*> > >::__construct_node(std::__1::pair<int const, FDType*> const&) __tree:2270
    #5 0x10f0274e3 in std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<int, FDType*>, std::__1::__tree_node<std::__1::__value_type<int, FDType*>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<int, FDType*>, std::__1::__map_value_compare<int, std::__1::__value_type<int, FDType*>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, FDType*> > >::__emplace_unique_key_args<int, std::__1::pair<int const, FDType*> const>(int const&, std::__1::pair<int const, FDType*> const&) __tree:2141
    #6 0x10f027037 in std::__1::__tree<std::__1::__value_type<int, FDType*>, std::__1::__map_value_compare<int, std::__1::__value_type<int, FDType*>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, FDType*> > >::__insert_unique(std::__1::pair<int const, FDType*> const&) __tree:1269
    #7 0x10f022dfb in std::__1::map<int, FDType*, std::__1::less<int>, std::__1::allocator<std::__1::pair<int const, FDType*> > >::insert(std::__1::pair<int const, FDType*> const&) map:1173
    #8 0x10f01b055 in CGI::testCGICall(Request&, Location&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&) CGI.cpp:68
    #9 0x10efa8b03 in Server::isCgiRequest(Location&, Request&) Server.cpp:139
    #10 0x10efd078e in Webserver::prepareResponse(Client&) Webserver.cpp:511
    #11 0x10efcd7be in Webserver::run(timeval) Webserver.cpp:271
    #12 0x10ef6a9ea in main main.cpp:21
    #13 0x7fff70eadcc8 in start+0x0 (libdyld.dylib:x86_64+0x1acc8)

SUMMARY: AddressSanitizer: heap-use-after-free Webserver.cpp:66 in Webserver::disconnect_client(Client&)
Shadow bytes around the buggy address:
  0x1c0800004bc0: fa fa fa fa fa fa fa fa fa fa 00 00 00 00 03 fa
  0x1c0800004bd0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x1c0800004be0: fa fa 00 00 00 00 00 00 fa fa 00 00 00 00 00 00
  0x1c0800004bf0: fa fa fa fa fa fa fa fa fa fa 00 00 00 00 03 fa
  0x1c0800004c00: fa fa fa fa fa fa fa fa fa fa 00 00 00 00 03 fa
=>0x1c0800004c10: fa fa 00 00 00 00 01 fa fa fa fd fd fd fd fd[fd]
  0x1c0800004c20: fa fa fa fa fa fa fa fa fa fa 00 00 00 00 03 fa
  0x1c0800004c30: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x1c0800004c40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x1c0800004c50: fa fa 00 00 00 00 01 fa fa fa 00 00 00 00 00 00
  0x1c0800004c60: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==2814==ABORTING
